[{"C:\\Users\\Daniel Nakajima\\OneDrive\\Área de Trabalho\\ReactProjects\\recipe_list\\src\\index.js":"1","C:\\Users\\Daniel Nakajima\\OneDrive\\Área de Trabalho\\ReactProjects\\recipe_list\\src\\App.js":"2"},{"size":433,"mtime":1611355773013,"results":"3","hashOfConfig":"4"},{"size":4754,"mtime":1612123331793,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"ejzq3w",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\Daniel Nakajima\\OneDrive\\Área de Trabalho\\ReactProjects\\recipe_list\\src\\index.js",[],["12","13"],"C:\\Users\\Daniel Nakajima\\OneDrive\\Área de Trabalho\\ReactProjects\\recipe_list\\src\\App.js",["14","15","16"],"import './App.css';\nimport {useState} from 'react';\nimport React from 'react'\n\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport SearchIcon from '@material-ui/icons/Search';\n\nfunction App() {\n\n  const [ingredientsList, setIngredientsList] = useState([]);\n  const [recipeList, setRecipeList] = useState();\n  const [ingredientsAdd, setIngredientAdd] = useState();\n\n  const [count,setCount] = useState(0);\n\n  const API_KEY = process.env.REACT_APP_SPOONACULAR_API_KEY;\n  \n  const BASE = 'https://api.spoonacular.com/recipes/findByIngredients?';\n  const TOTAL = 'https://api.spoonacular.com/recipes/findByIngredients?apiKey=65a19a69d8774ac59ba73e8a628a3c49&ingredients=apples,+flour,+sugar&number=2';\n  const itens = 'apples,flour, sugar';\n\n  const fetchData = async(recipeSearch)=>{\n    const response = await fetch(`${BASE}apiKey=${API_KEY}&ingredients=${recipeSearch}&number=10`);\n    const recipes = await response.json();\n    return setRecipeList(recipes);\n  }\n\n  const searchBoxStyle = {\n    width:'70%',\n  } \n\n  const addButtonStyle={\n    backgroundColor: '#2910d0',\n    color:'white'\n  }\n\n  const searchButtonStyle = {\n    backgroundColor:'#2910d0',\n    color:'white',\n    fontSize:13,\n    textTransform: 'none'\n  }\n\n  const handleSearch = ()=>{\n\n    const teste = ingredientsList.map((val)=>(\n      val.ingredient\n    )).join(',');\n  \n    fetchData(teste);\n\n  }\n\n\n  const handleAddIngredients = ()=>{ \n    if(ingredientsAdd !== null && ingredientsAdd !== '' && !/^\\s*$/.test(ingredientsAdd))\n    {\n      setCount(i => i+1);\n      setIngredientsList([...ingredientsList, {'id':{count},'ingredient': ingredientsAdd}]);\n      setIngredientAdd('')\n    }\n  }\n\n  const ingredientInput = (e)=>{\n    let target = e.target.value;\n    setIngredientAdd(target)\n  }\n\n  const handleRemoveIngredient = (id)=>{\n    const newList = ingredientsList.filter((val)=> val.id !==id)\n    setIngredientsList(newList)\n  }\n\n  const handleKeyPress = (e)=>{\n    if(e.key === 'Enter'){\n      handleAddIngredients();\n    }\n  }\n\n  return (\n\n    <div className=\"App\">\n      <div className=\"menu-wrap\">\n        <div className=\"title\">\n          <p>Recipe List</p>\n        </div>\n        <div className=\"ingredients-list\">\n    \n          {ingredientsList.map((val)=>(\n            <li>\n              <span>{val.ingredient}</span>\n              <iconButton onClick={()=>handleRemoveIngredient(val.id)}><ClearIcon/></iconButton>\n            </li>\n          ))}\n\n        </div>\n        <div className=\"add-ingredients-wrap\">\n          \n          <TextField size=\"small\" style={searchBoxStyle} variant=\"outlined\" inputProps={{style:{fontSize:15}}} onChange={ingredientInput} onKeyPress={handleKeyPress} value={ingredientsAdd}></TextField>\n          <IconButton size=\"small\" style={addButtonStyle} onClick={handleAddIngredients}><AddIcon/></IconButton>\n      \n        </div>\n        <div className=\"search-wrap\">\n          <Button onClick={handleSearch} style={searchButtonStyle} startIcon={<SearchIcon/>}>Search</Button>\n        </div>\n        \n      </div>\n\n      <div className=\"recipes-list-wrap\">\n        \n        {recipeList && recipeList.map((recipeList)=>(\n         <div className=\"recipe-item\">\n           <div className=\"recipe-item-title\">\n            {recipeList.title}\n           </div>\n           <div className=\"recipe-item-content\">\n             <div className=\"recipe-item-content-image\">\n               <img src={recipeList.image}></img>\n             </div>\n            <div className=\"recipe-item-content-used-ingredients\">\n              <p>Used Ingredients: {recipeList.usedIngredientCount}</p>\n              <div className=\"used-ingredients-list\">\n               {recipeList.usedIngredients.map((used)=>(\n                <li>\n                  {used.originalString}\n                </li>\n               ))}\n              </div>\n            </div>\n            <div className=\"recipe-item-content-missed-ingredients\">\n              <p>Missed Ingredients: {recipeList.missedIngredientCount}</p>\n              <div className=\"missed-ingredients-list\">\n                {recipeList.missedIngredients.map((missed)=>(\n                  <li>\n                    {missed.originalString}\n                  </li>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"recipe-likes\">\n            <p>Likes: {recipeList.likes}</p>       \n          </div>\n          <div className=\"recipe-divider\"><hr></hr></div>\n          </div>\n          \n        ))}\n        \n        \n\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":23,"column":9,"nodeType":"23","messageId":"24","endLine":23,"endColumn":14},{"ruleId":"21","severity":1,"message":"25","line":24,"column":9,"nodeType":"23","messageId":"24","endLine":24,"endColumn":14},{"ruleId":"26","severity":1,"message":"27","line":122,"column":16,"nodeType":"28","endLine":122,"endColumn":44},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'TOTAL' is assigned a value but never used.","Identifier","unusedVar","'itens' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]